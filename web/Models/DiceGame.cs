using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts;
using System.Threading;

namespace DiceGame
{
    public class DiceGameConsole
    {
        public static async Task Main()
        {
            var url = "http://testchain.nethereum.com:8545";
            //var url = "https://mainnet.infura.io";
            var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
            var account = new Nethereum.Web3.Accounts.Account(privateKey);
            var web3 = new Web3(account, url);

            /* Deployment 
           var diceGameDeployment = new DiceGameDeployment();

           var transactionReceiptDeployment = await web3.Eth.GetContractDeploymentHandler<DiceGameDeployment>().SendRequestAndWaitForReceiptAsync(diceGameDeployment);
           var contractAddress = transactionReceiptDeployment.ContractAddress;
            */
            // var contractHandler = web3.Eth.GetContractHandler(contractAddress);

            /** Function: calculateScore**/
            /*
            var calculateScoreFunction = new CalculateScoreFunction();
            calculateScoreFunction.Dice = dice;
            var calculateScoreFunctionReturn = await contractHandler.QueryAsync<CalculateScoreFunction, byte>(calculateScoreFunction);
            */


            /** Function: dealer**/
            /*
            var dealerFunctionReturn = await contractHandler.QueryAsync<DealerFunction, string>();
            */


            /** Function: dealerFeePercent**/
            /*
            var dealerFeePercentFunctionReturn = await contractHandler.QueryAsync<DealerFeePercentFunction, BigInteger>();
            */


            /** Function: deposit**/
            /*
            var depositFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<DepositFunction>();
            */


            /** Function: endBlock**/
            /*
            var endBlockFunctionReturn = await contractHandler.QueryAsync<EndBlockFunction, BigInteger>();
            */


            /** Function: endGame**/
            /*
            var endGameFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<EndGameFunction>();
            */


            /** Function: gamePlayers**/
            /*
            var gamePlayersFunction = new GamePlayersFunction(); 
            gamePlayersFunction.ReturnValue1 = returnValue1;
            var gamePlayersOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GamePlayersFunction, GamePlayersOutputDTO>(gamePlayersFunction);
            */


            /** Function: getPlayers**/
            /*
            var getPlayersOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<GetPlayersFunction, GetPlayersOutputDTO>();
            */


            /** Function: joinGame**/
            /*
            var joinGameFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<JoinGameFunction>();
            */


            /** Function: playerAddresses**/
            /*
            var playerAddressesFunction = new PlayerAddressesFunction();
            playerAddressesFunction.ReturnValue1 = returnValue1;
            var playerAddressesFunctionReturn = await contractHandler.QueryAsync<PlayerAddressesFunction, string>(playerAddressesFunction);
            */


            /** Function: players**/
            /*
            var playersFunction = new PlayersFunction(); 
            playersFunction.ReturnValue1 = returnValue1;
            var playersOutputDTO = await contractHandler.QueryDeserializingToObjectAsync<PlayersFunction, PlayersOutputDTO>(playersFunction);
            */


            /** Function: setDealerFeePercent**/
            /*
            var setDealerFeePercentFunction = new SetDealerFeePercentFunction();
            setDealerFeePercentFunction.FeePercent = feePercent;
            var setDealerFeePercentFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync(setDealerFeePercentFunction);
            */


            /** Function: startBlock**/
            /*
            var startBlockFunctionReturn = await contractHandler.QueryAsync<StartBlockFunction, BigInteger>();
            */


            /** Function: startGame**/
            /*
            var startGameFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<StartGameFunction>();
            */


            /** Function: state**/
            /*
            var stateFunctionReturn = await contractHandler.QueryAsync<StateFunction, byte>();
            */


            /** Function: withdraw**/
            /*
            var withdrawFunctionTxnReceipt = await contractHandler.SendRequestAndWaitForReceiptAsync<WithdrawFunction>();
            */
        }

    }

    public partial class DiceGameDeployment : DiceGameDeploymentBase
    {
        public DiceGameDeployment() : base(BYTECODE) { }
        public DiceGameDeployment(string byteCode) : base(byteCode) { }
    }

    public class DiceGameDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = "6080604052600f6003553480156013575f80fd5b505f80546101003302610100600160a81b0319909116179055612245806100395f395ff3fe6080604052600436106100ef575f3560e01c80638f0b9fe511610087578063d0e30db011610057578063d0e30db0146102b1578063d4f77b1c146102b9578063d65ab5f2146102c1578063e2eb41ff146102d5575f80fd5b80638f0b9fe5146102355780639de2ee211461024a578063b4cd9a2b1461026d578063c19d93fb1461028c575f80fd5b806348cd4cb1116100c257806348cd4cb1146101ba57806362653500146101cf5780636cbc2ded146102005780638b5b9ccc14610214575f80fd5b8063083c6323146100f357806315c6aee21461011b578063346716f4146101525780633ccfd60b146101a4575b5f80fd5b3480156100fe575f80fd5b5061010860055481565b6040519081526020015b60405180910390f35b348015610126575f80fd5b5061013a610135366004611e2d565b610329565b6040516001600160a01b039091168152602001610112565b34801561015d575f80fd5b5061017161016c366004611e2d565b610351565b604080519586526001600160a01b03909416602086015292840191909152606083015260ff16608082015260a001610112565b3480156101af575f80fd5b506101b861039d565b005b3480156101c5575f80fd5b5061010860045481565b3480156101da575f80fd5b506101ee6101e9366004611e6d565b610441565b60405160ff9091168152602001610112565b34801561020b575f80fd5b506101b86106eb565b34801561021f575f80fd5b50610228610d2c565b6040516101129190611f1f565b348015610240575f80fd5b5061010860035481565b348015610255575f80fd5b505f5461013a9061010090046001600160a01b031681565b348015610278575f80fd5b506101b8610287366004611e2d565b610ead565b348015610297575f80fd5b505f546102a49060ff1681565b6040516101129190612030565b6101b8610f6a565b6101b8610fa4565b3480156102cc575f80fd5b506101b86114fb565b3480156102e0575f80fd5b506101716102ef366004612056565b600160208190525f9182526040909120805491810154600282015460038301546006909301546001600160a01b0390921692909160ff1685565b60028181548110610338575f80fd5b5f918252602090912001546001600160a01b0316905081565b60068181548110610360575f80fd5b5f918252602090912060079091020180546001820154600283015460038401546006909401549294506001600160a01b0390911692909160ff1685565b5f5461010090046001600160a01b031633146104005760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920746865206465616c65722063616e2063616c6c20746869732e000060448201526064015b60405180910390fd5b5f80546040516001600160a01b0361010090920491909116914780156108fc02929091818181858888f1935050505015801561043e573d5f803e3d5ffd5b50565b5f61044a611b87565b5f5b600481101561054557600184826004811061046957610469612083565b602002015160ff16101580156104995750600684826004811061048e5761048e612083565b602002015160ff1611155b6104f05760405162461bcd60e51b815260206004820152602260248201527f446963652076616c7565206d757374206265206265747765656e203120616e64604482015261101b60f11b60648201526084016103f7565b81600185836004811061050557610505612083565b602002015161051491906120ab565b60ff166006811061052757610527612083565b60200201805190610537826120ca565b60ff1690525060010161044c565b505f805f5b60068110156106245783816006811061056557610565612083565b602002015160ff16600403610580575060ff95945050505050565b83816006811061059257610592612083565b602002015160ff166003036105ac57505f95945050505050565b8381600681106105be576105be612083565b602002015160ff166002036105ed57816105d7816120ca565b92505082806105e5906120ca565b93505061061c565b5f84826006811061060057610600612083565b602002015160ff16111561061c5782610618816120ca565b9350505b60010161054a565b508160ff1660040361063a57505f949350505050565b5f60055b84816006811061065057610650612083565b602002015160ff16600214801561066a57508260ff166002145b156106905761067a8160016120e8565b6106859060026120fb565b979650505050505050565b8481600681106106a2576106a2612083565b602002015160ff166001036106c9576106bc8160016120e8565b6106c69083612112565b91505b80156106e157806106d98161212b565b91505061063e565b5095945050505050565b60408051808201909152601581527423b0b6b2903737ba1034b710383937b3b932b9b99760591b6020820152600190815f5460ff1660028111156107315761073161201c565b1481906107515760405162461bcd60e51b81526004016103f79190612140565b505f5461010090046001600160a01b0316331480610770575060055443115b6107ed5760405162461bcd60e51b815260206004820152604260248201527f4f6e6c7920746865206465616c65722063616e20656e64207468652067616d6560448201527f206561726c79206f7220776169742074696c6c2074686520656e6420626c6f63606482015261359760f11b608482015260a4016103f7565b5f546108069061010090046001600160a01b03166117ac565b5f805461010090046001600160a01b031681526001602052604090206006015460ff1660038111158061083d5750600c8160ff1610155b156108f4575f5b6002548110156108ee57600c8260ff1610156108a75760015f6002838154811061087057610870612083565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206002908101546108a2916120fb565b6108a9565b5f5b60015f600284815481106108bf576108bf612083565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060030155600101610844565b50610add565b5f5b6002548110156109375761092f6002828154811061091657610916612083565b5f918252602090912001546001600160a01b03166117ac565b6001016108f6565b505f5b600254811015610adb575f60015f6002848154811061095b5761095b612083565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206006015460ff90811691508316811115610a1c5760015f600284815481106109a8576109a8612083565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206002908101546109da916120fb565b60015f600285815481106109f0576109f0612083565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060030155610ad2565b8260ff168160ff1603610a935760015f60028481548110610a3f57610a3f612083565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f206002015460015f600285815481106109f0576109f0612083565b5f60015f60028581548110610aaa57610aaa612083565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600301555b5060010161093a565b505b610ae860065f611ba5565b5f80546001600160a01b036101009091048116825260016020819052604083206006805480840182559452805460079094027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f8101948555918101547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40830180546001600160a01b031916919094161790925560028201547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4182015560038201547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42820155600482018054929392610c03927ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43019190611bc3565b50610c1660058281019084016004611c18565b506006918201549101805460ff191660ff9092169190911790555f5b600254811015610d1257600660015f60028481548110610c5457610c54612083565b5f9182526020808320909101546001600160a01b03908116845283820194909452604090920181208454600181810187559583529290912081546007909302019182558084015493820180546001600160a01b0319169490931693909317909155600280830154908201556003808301549082015560048083018054610cdd9284019190611bc3565b50610cf060058281019084016004611c18565b506006918201549101805460ff191660ff909216919091179055600101610c32565b50610d1b6117b6565b50505f805460ff1916600217905550565b60606006805480602002602001604051908101604052809291908181526020015f905b82821015610ea4575f84815260208082206040805160e081018252600787029092018054835260018101546001600160a01b0316838501526002810154838301526003810154606084015260048101805483518187028101870190945280845293959194608087019491929084015b82821015610e29575f848152602081206040805160808101918290529291850191600491908390855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610de7579050505050505081526020019060010190610dbe565b50505090825250604080516080810191829052602090920191906005840190600490825f855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610e4f575050509284525050506006919091015460ff166020918201529082526001929092019101610d4f565b50505050905090565b5f5461010090046001600160a01b03163314610f0b5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920746865206465616c65722063616e2063616c6c20746869732e000060448201526064016103f7565b60648110610f655760405162461bcd60e51b815260206004820152602160248201527f4665652070657263656e74206d757374206265206c657373207468616e2031306044820152600360fc1b60648201526084016103f7565b600355565b604080513381523460208201527f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e910160405180910390a1565b60408051808201909152601581527423b0b6b2903430b9903737ba1039ba30b93a32b21760591b6020820152600190815f5460ff166002811115610fea57610fea61201c565b14819061100a5760405162461bcd60e51b81526004016103f79190612140565b5060055443111561105d5760405162461bcd60e51b815260206004820152601a60248201527f5468652067616d6520706572696f642068617320656e6465642e00000000000060448201526064016103f7565b5f5461010090046001600160a01b031633036110bb5760405162461bcd60e51b815260206004820152601c60248201527f4465616c65722063616e6e6f74206a6f696e207468652067616d652e0000000060448201526064016103f7565b335f90815260016020526040902060020154156111135760405162461bcd60e51b8152602060048201526016602482015275283630bcb2b91030b63932b0b23c903537b4b732b21760511b60448201526064016103f7565b5f3411801561112a575067016345785d8a00003411155b6111a65760405162461bcd60e51b815260206004820152604160248201527f5374616b65206d7573742062652067726561746572207468616e203020616e6460448201527f206c657373207468616e206f7220657175616c20746f20302e312065746865726064820152601760f91b608482015260a4016103f7565b600254600a116111f05760405162461bcd60e51b8152602060048201526015602482015274283630bcb2b9103634b6b4ba103932b0b1b432b21760591b60448201526064016103f7565b6040518060e00160405280428152602001336001600160a01b031681526020013481526020015f81526020015f67ffffffffffffffff81111561123557611235611e44565b60405190808252806020026020018201604052801561126e57816020015b61125b611c57565b8152602001906001900390816112535790505b50815260408051608080820183525f8083526020808401829052838501829052606080850183905281870194909452948401819052338152600180865290849020865181558686015191810180546001600160a01b0319166001600160a01b03909316929092179091559285015160028401559084015160038301558301518051919261130392600485019290910190611c75565b5060a08201516113199060058301906004611cba565b5060c091909101516006918201805460ff90921660ff19909216919091179055335f90815260016020819052604082208354808301855593909252815460079093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f8101938455908201547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40820180546001600160a01b0319166001600160a01b039290921691909117905560028201547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4182015560038201547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4282015560048201805492939261144e927ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43019190611bc3565b5061146160058281019084016004611c18565b506006918201549101805460ff191660ff909216919091179055600280546001810182555f919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191633908117909155604080519182523460208301527f3330a6773675f31f62070870f40379f8c6d42e3761410011a4dfc42b18043d2f910160405180910390a15050565b60408051808201909152601981527f47616d652068617320616c726561647920737461727465642e000000000000006020820152600190815f5460ff1660028111156115495761154961201c565b1415819061156a5760405162461bcd60e51b81526004016103f79190612140565b5060014710156115e25760405162461bcd60e51b815260206004820152603c60248201527f436f6e74726163742062616c616e6365206d757374206265206174206c65617360448201527f74203120657468657220746f207374617274207468652067616d652e0000000060648201526084016103f7565b4360048190556115f39060146120e8565b60055560025f5460ff16600281111561160e5761160e61201c565b0361161b5761161b6118ef565b5f805460ff191660011790556004546005546040805192835260208301919091527fa2dfaa3573b86004ec9d4d4abe5068d942579c59da4da8cd0d9e45e71a393bc1910160405180910390a16040805160e0810182524281525f805461010090046001600160a01b03166020830152918101829052606081018290529060808201906040519080825280602002602001820160405280156116d657816020015b6116c3611c57565b8152602001906001900390816116bb5790505b50815260408051608080820183525f8083526020808401829052838501829052606080850183905281870194909452948401819052805461010090046001600160a01b039081168252600180875291859020875181558787015192810180546001600160a01b031916939092169290921790559285015160028401559084015160038301558301518051919261177492600485019290910190611c75565b5060a082015161178a9060058301906004611cba565b5060c091909101516006909101805460ff191660ff9092169190911790555050565b61043e815f6119a7565b5f5b60025481101561043e575f60015f600284815481106117d9576117d9612083565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206003015490508015611886575f60646003548361181991906120fb565b6118239190612189565b90505f611830828461219c565b90506002848154811061184557611845612083565b5f9182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015611882573d5f803e3d5ffd5b5050505b7fd4ba6fec82d9b0e8ffe50b9fed9e4be3b25c984ce1e0e016405a5528726e8a2c600283815481106118ba576118ba612083565b5f9182526020918290200154604080516001600160a01b0390921682529181018490520160405180910390a1506001016117b8565b5f5b60025481101561197f5760015f6002838154811061191157611911612083565b5f9182526020808320909101546001600160a01b0316835282019290925260400181208181556001810180546001600160a01b03191690556002810182905560038101829055906119656004830182611d45565b5f600583015550600601805460ff191690556001016118f1565b5061198b60065f611ba5565b604080515f815260208101918290525161043e91600291611d60565b806119b1816120ca565b9150506119bc611c57565b5f5b60048160ff161015611a7457604080514260208201526bffffffffffffffffffffffff19606087901b16918101919091526001600160f81b031960f883811b8216605484015285901b166055820152600690605601604051602081830303815290604052805190602001205f1c611a3591906121af565b611a409060016120e8565b828260ff1660048110611a5557611a55612083565b60ff909216602092909202015280611a6c816120ca565b9150506119be565b505f611a7f82610441565b90508060ff165f03611b0d576001600160a01b0384165f908152600160208181526040832060049081018054938401815584529220611ac2929101908490611cba565b507f0ca1e05aea25e585cabc2cacac0c483b8cf9fbf55168c7d62b71e536e872b062848383604051611af6939291906121c2565b60405180910390a1611b0884846119a7565b611b81565b6001600160a01b0384165f90815260016020526040902060068101805460ff191660ff8416179055611b4490600501836004611cba565b507f0ca1e05aea25e585cabc2cacac0c483b8cf9fbf55168c7d62b71e536e872b062848383604051611b78939291906121c2565b60405180910390a15b50505050565b6040518060c001604052806006906020820280368337509192915050565b5080545f8255600702905f5260205f209081019061043e9190611db3565b828054828255905f5260205f20908101928215611c08575f5260205f209182015b82811115611c0857611bf882846004611c18565b5091600101919060010190611be4565b50611c14929150611e07565b5090565b600183019183908215611c4b5791601f016020900482015b82811115611c4b578254825591600101919060010190611c30565b50611c14929150611e1a565b60405180608001604052806004906020820280368337509192915050565b828054828255905f5260205f20908101928215611c08579160200282015b82811115611c08578251611caa9083906004611cba565b5091602001919060010190611c93565b600183019183908215611c4b579160200282015f5b83821115611d0c57835183826101000a81548160ff021916908360ff16021790555092602001926001016020815f01049283019260010302611ccf565b8015611d385782816101000a81549060ff02191690556001016020815f01049283019260010302611d0c565b5050611c14929150611e1a565b5080545f8255905f5260205f209081019061043e9190611e07565b828054828255905f5260205f20908101928215611c4b579160200282015b82811115611c4b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611d7e565b80821115611c14575f8082556001820180546001600160a01b03191690556002820181905560038201819055611dec6004830182611d45565b5f60058301555060068101805460ff19169055600701611db3565b80821115611c14575f8155600101611e07565b80821115611c14575f8155600101611e07565b5f60208284031215611e3d575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b803560ff81168114611e68575f80fd5b919050565b5f60808284031215611e7d575f80fd5b82601f830112611e8b575f80fd5b6040516080810181811067ffffffffffffffff82111715611eba57634e487b7160e01b5f52604160045260245ffd5b604052806080840185811115611ece575f80fd5b845b81811015611eef57611ee181611e58565b835260209283019201611ed0565b509195945050505050565b805f5b6004811015611b8157815160ff16845260209384019390910190600101611efd565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b8381101561200e57888303603f19018552815180518452878101516001600160a01b0316888501528681015187850152606080820151908501526080808201516101408287018190528151908701819052610160870192918b0191905f905b80821015611fcc57611fb8858551611efa565b93820193928c019260019190910190611fa5565b5050505060a080830151611fe282880182611efa565b505060c08201519150611ffb61012086018360ff169052565b9588019593505090860190600101611f46565b509098975050505050505050565b634e487b7160e01b5f52602160045260245ffd5b602081016003831061205057634e487b7160e01b5f52602160045260245ffd5b91905290565b5f60208284031215612066575f80fd5b81356001600160a01b038116811461207c575f80fd5b9392505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b60ff82811682821603908111156120c4576120c4612097565b92915050565b5f60ff821660ff81036120df576120df612097565b60010192915050565b808201808211156120c4576120c4612097565b80820281158282048414176120c4576120c4612097565b60ff81811683821601908111156120c4576120c4612097565b5f8161213957612139612097565b505f190190565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52601260045260245ffd5b5f8261219757612197612175565b500490565b818103818111156120c4576120c4612097565b5f826121bd576121bd612175565b500690565b6001600160a01b038416815260c081016020808301855f5b60048110156121fa57815160ff16835291830191908301906001016121da565b5050505060ff831660a083015294935050505056fea2646970667358221220f662f7e1835b04c655fd63a5608c6c6ca2b09c92bf4bd0f3c102b1328f792f2464736f6c63430008190033";
        public DiceGameDeploymentBase() : base(BYTECODE) { }
        public DiceGameDeploymentBase(string byteCode) : base(byteCode) { }

    }

    public partial class CalculateScoreFunction : CalculateScoreFunctionBase { }

    [Function("calculateScore", "uint8")]
    public class CalculateScoreFunctionBase : FunctionMessage
    {
        [Parameter("uint8[4]", "dice", 1)]
        public virtual List<byte> Dice { get; set; }
    }

    public partial class DealerFunction : DealerFunctionBase { }

    [Function("dealer", "address")]
    public class DealerFunctionBase : FunctionMessage
    {

    }

    public partial class DealerFeePercentFunction : DealerFeePercentFunctionBase { }

    [Function("dealerFeePercent", "uint256")]
    public class DealerFeePercentFunctionBase : FunctionMessage
    {

    }

    public partial class DepositFunction : DepositFunctionBase { }

    [Function("deposit")]
    public class DepositFunctionBase : FunctionMessage
    {

    }

    public partial class EndBlockFunction : EndBlockFunctionBase { }

    [Function("endBlock", "uint256")]
    public class EndBlockFunctionBase : FunctionMessage
    {

    }

    public partial class EndGameFunction : EndGameFunctionBase { }

    [Function("endGame")]
    public class EndGameFunctionBase : FunctionMessage
    {

    }

    public partial class GamePlayersFunction : GamePlayersFunctionBase { }

    [Function("gamePlayers", typeof(GamePlayersOutputDTO))]
    public class GamePlayersFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetPlayersFunction : GetPlayersFunctionBase { }

    [Function("getPlayers", typeof(GetPlayersOutputDTO))]
    public class GetPlayersFunctionBase : FunctionMessage
    {

    }

    public partial class JoinGameFunction : JoinGameFunctionBase { }

    [Function("joinGame")]
    public class JoinGameFunctionBase : FunctionMessage
    {

    }

    public partial class PlayerAddressesFunction : PlayerAddressesFunctionBase { }

    [Function("playerAddresses", "address")]
    public class PlayerAddressesFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class PlayersFunction : PlayersFunctionBase { }

    [Function("players", typeof(PlayersOutputDTO))]
    public class PlayersFunctionBase : FunctionMessage
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class SetDealerFeePercentFunction : SetDealerFeePercentFunctionBase { }

    [Function("setDealerFeePercent")]
    public class SetDealerFeePercentFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "_feePercent", 1)]
        public virtual BigInteger FeePercent { get; set; }
    }

    public partial class StartBlockFunction : StartBlockFunctionBase { }

    [Function("startBlock", "uint256")]
    public class StartBlockFunctionBase : FunctionMessage
    {

    }

    public partial class StartGameFunction : StartGameFunctionBase { }

    [Function("startGame")]
    public class StartGameFunctionBase : FunctionMessage
    {

    }

    public partial class StateFunction : StateFunctionBase { }

    [Function("state", "uint8")]
    public class StateFunctionBase : FunctionMessage
    {

    }

    public partial class WithdrawFunction : WithdrawFunctionBase { }

    [Function("withdraw")]
    public class WithdrawFunctionBase : FunctionMessage
    {

    }

    public partial class DepositReceivedEventDTO : DepositReceivedEventDTOBase { }

    [Event("DepositReceived")]
    public class DepositReceivedEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, false)]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 2, false)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class DiceRolledEventDTO : DiceRolledEventDTOBase { }

    [Event("DiceRolled")]
    public class DiceRolledEventDTOBase : IEventDTO
    {
        [Parameter("address", "player", 1, false)]
        public virtual string Player { get; set; }
        [Parameter("uint8[4]", "diceRolls", 2, false)]
        public virtual List<byte> DiceRolls { get; set; }
        [Parameter("uint8", "score", 3, false)]
        public virtual byte Score { get; set; }
    }

    public partial class GameEndedEventDTO : GameEndedEventDTOBase { }

    [Event("GameEnded")]
    public class GameEndedEventDTOBase : IEventDTO
    {
        [Parameter("address", "player", 1, false)]
        public virtual string Player { get; set; }
        [Parameter("uint256", "payout", 2, false)]
        public virtual BigInteger Payout { get; set; }
    }

    public partial class GameStartedEventDTO : GameStartedEventDTOBase { }

    [Event("GameStarted")]
    public class GameStartedEventDTOBase : IEventDTO
    {
        [Parameter("uint256", "startBlock", 1, false)]
        public virtual BigInteger StartBlock { get; set; }
        [Parameter("uint256", "endBlock", 2, false)]
        public virtual BigInteger EndBlock { get; set; }
    }

    public partial class PlayerJoinedEventDTO : PlayerJoinedEventDTOBase { }

    [Event("PlayerJoined")]
    public class PlayerJoinedEventDTOBase : IEventDTO
    {
        [Parameter("address", "player", 1, false)]
        public virtual string Player { get; set; }
        [Parameter("uint256", "stake", 2, false)]
        public virtual BigInteger Stake { get; set; }
    }

    public partial class CalculateScoreOutputDTO : CalculateScoreOutputDTOBase { }

    [FunctionOutput]
    public class CalculateScoreOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint8", "", 1)]
        public virtual byte ReturnValue1 { get; set; }
    }

    public partial class DealerOutputDTO : DealerOutputDTOBase { }

    [FunctionOutput]
    public class DealerOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class DealerFeePercentOutputDTO : DealerFeePercentOutputDTOBase { }

    [FunctionOutput]
    public class DealerFeePercentOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }



    public partial class EndBlockOutputDTO : EndBlockOutputDTOBase { }

    [FunctionOutput]
    public class EndBlockOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }



    public partial class GamePlayersOutputDTO : GamePlayersOutputDTOBase { }

    [FunctionOutput]
    public class GamePlayersOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "joinTime", 1)]
        public virtual BigInteger JoinTime { get; set; }
        [Parameter("address", "playerAddress", 2)]
        public virtual string PlayerAddress { get; set; }
        [Parameter("uint256", "stake", 3)]
        public virtual BigInteger Stake { get; set; }
        [Parameter("uint256", "payout", 4)]
        public virtual BigInteger Payout { get; set; }
        [Parameter("uint8", "score", 5)]
        public virtual byte Score { get; set; }
    }

    public partial class GetPlayersOutputDTO : GetPlayersOutputDTOBase { }

    [FunctionOutput]
    public class GetPlayersOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("tuple[]", "", 1)]
        public virtual List<Player> ReturnValue1 { get; set; }
    }



    public partial class PlayerAddressesOutputDTO : PlayerAddressesOutputDTOBase { }

    [FunctionOutput]
    public class PlayerAddressesOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("address", "", 1)]
        public virtual string ReturnValue1 { get; set; }
    }

    public partial class PlayersOutputDTO : PlayersOutputDTOBase { }

    [FunctionOutput]
    public class PlayersOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "joinTime", 1)]
        public virtual BigInteger JoinTime { get; set; }
        [Parameter("address", "playerAddress", 2)]
        public virtual string PlayerAddress { get; set; }
        [Parameter("uint256", "stake", 3)]
        public virtual BigInteger Stake { get; set; }
        [Parameter("uint256", "payout", 4)]
        public virtual BigInteger Payout { get; set; }
        [Parameter("uint8", "score", 5)]
        public virtual byte Score { get; set; }
    }



    public partial class StartBlockOutputDTO : StartBlockOutputDTOBase { }

    [FunctionOutput]
    public class StartBlockOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }



    public partial class StateOutputDTO : StateOutputDTOBase { }

    [FunctionOutput]
    public class StateOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint8", "", 1)]
        public virtual byte ReturnValue1 { get; set; }
    }



    public partial class Player : PlayerBase { }

    public class PlayerBase
    {
        [Parameter("uint256", "joinTime", 1)]
        public virtual BigInteger JoinTime { get; set; }
        [Parameter("address", "playerAddress", 2)]
        public virtual string PlayerAddress { get; set; }
        [Parameter("uint256", "stake", 3)]
        public virtual BigInteger Stake { get; set; }
        [Parameter("uint256", "payout", 4)]
        public virtual BigInteger Payout { get; set; }
        [Parameter("uint8[4][]", "diceHistory", 5)]
        public virtual List<List<byte>> DiceHistory { get; set; }
        [Parameter("uint8[4]", "diceRolls", 6)]
        public virtual List<byte> DiceRolls { get; set; }
        [Parameter("uint8", "score", 7)]
        public virtual byte Score { get; set; }
    }
}
